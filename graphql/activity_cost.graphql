type ActivityCost implements BaseDocType {
  doctype: String
  name: String
  owner: User!
  creation: String
  modified: String
  modified_by: User!
  docstatus: Int
  idx: Int
  owner__name: String!
  modified_by__name: String!
  parent__name: String
  activity_type: ActivityType!
  activity_type__name: String
  employee: Employee
  employee__name: String
  employee_name: String
  department: Department
  department__name: String
  billing_rate: Float
  costing_rate: Float
  title: String
}

enum ActivityCostSortField {
  NAME
  CREATION
  MODIFIED
}

input ActivityCostSortingInput {
  direction: SortDirection!
  field: ActivityCostSortField!
}

type ActivityCostCountableEdge {
  cursor: String!
  node: ActivityCost!
}

type ActivityCostCountableConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [ActivityCostCountableEdge!]!
}

extend type Query {
  ActivityCost(name: String!): ActivityCost!
  ActivityCosts(filter: [DBFilterInput], sortBy: ActivityCostSortingInput, before: String, after: String, first: Int, last: Int): ActivityCostCountableConnection!
}
