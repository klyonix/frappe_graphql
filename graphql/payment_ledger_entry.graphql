type PaymentLedgerEntry implements BaseDocType {
  doctype: String
  name: String
  owner: User!
  creation: String
  modified: String
  modified_by: User!
  docstatus: Int
  idx: Int
  owner__name: String!
  modified_by__name: String!
  parent__name: String
  posting_date: String
  company: Company
  company__name: String
  account_type: PaymentLedgerEntryAccountTypeSelectOptions
  account: Account
  account__name: String
  party_type: DocType
  party_type__name: String
  party: BaseDocType
  party__name: String
  due_date: String
  voucher_detail_no: String
  cost_center: CostCenter
  cost_center__name: String
  finance_book: FinanceBook
  finance_book__name: String
  voucher_type: DocType
  voucher_type__name: String
  voucher_no: BaseDocType
  voucher_no__name: String
  against_voucher_type: DocType
  against_voucher_type__name: String
  against_voucher_no: BaseDocType
  against_voucher_no__name: String
  amount: Float
  account_currency: Currency
  account_currency__name: String
  amount_in_account_currency: Float
  delinked: Int
  remarks: String
}

enum PaymentLedgerEntryAccountTypeSelectOptions {
  RECEIVABLE
  PAYABLE
}

enum PaymentLedgerEntrySortField {
  NAME
  CREATION
  MODIFIED
  POSTING_DATE
  COMPANY
  ACCOUNT
  PARTY_TYPE
  PARTY
  VOUCHER_DETAIL_NO
  VOUCHER_TYPE
  VOUCHER_NO
  AGAINST_VOUCHER_TYPE
  AGAINST_VOUCHER_NO
}

input PaymentLedgerEntrySortingInput {
  direction: SortDirection!
  field: PaymentLedgerEntrySortField!
}

type PaymentLedgerEntryCountableEdge {
  cursor: String!
  node: PaymentLedgerEntry!
}

type PaymentLedgerEntryCountableConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PaymentLedgerEntryCountableEdge!]!
}

extend type Query {
  PaymentLedgerEntry(name: String!): PaymentLedgerEntry!
  PaymentLedgerEntrys(filter: [DBFilterInput], sortBy: PaymentLedgerEntrySortingInput, before: String, after: String, first: Int, last: Int): PaymentLedgerEntryCountableConnection!
}
