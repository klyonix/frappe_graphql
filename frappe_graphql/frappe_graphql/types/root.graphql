scalar Upload
scalar Password

schema {
	query: Query
	mutation: Mutation
  subscription: Subscription
}

interface BaseDocType {
  doctype: String
  name: String
  owner: User!
  creation: String
  modified: String
  modified_by: User!
  parent: BaseDocType
  parent__name: String
  parentfield: String
  parenttype: String
  idx: Int
  docstatus: Int
  owner__name: String!
  modified_by__name: String!
}

interface BaseSubscription {
  subscription_id: String!
}


type SET_VALUE_TYPE {
    doctype: String!
    name: String!
    fieldname: String!
    value: DOCFIELD_VALUE_TYPE!
    doc: BaseDocType!
}


"""
Supports ID | Boolean | Int | String | Float | JSONString
"""
scalar DOCFIELD_VALUE_TYPE

type SAVE_DOC_TYPE {
    doctype: String!
    name: String!
    doc: BaseDocType!
}

type DELETE_DOC_TYPE {
    doctype: String!
    name: String!
    success: Boolean!
}

type Mutation {

    # Basic Document Mutations
    setValue(doctype: String!, name: String!, fieldname: String!, value: DOCFIELD_VALUE_TYPE!): SET_VALUE_TYPE
    saveDoc(doctype: String!, doc: String!): SAVE_DOC_TYPE
    deleteDoc(doctype: String!, name: String!): DELETE_DOC_TYPE

    uploadFile(file: Upload!, is_private: Boolean, attached_to_doctype: String,
        attached_to_name: String, fieldname: String): File
    
    # Subscription KeepAlive
    subscriptionKeepAlive(subscription: String!, subscription_id: String!): SubscriptionInfo!
}

type Query {
	ping: String!
}

type Subscription {
  doc_events(doctypes: [String!]): DocEvent
}

enum DBFilterOperator {
  EQ
  NEQ
  LT
  GT
  LTE
  GTE
  LIKE
  NOT_LIKE
}

input DBFilterInput {
  fieldname: String!
  operator: DBFilterOperator
  value: String!
}

enum SortDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
